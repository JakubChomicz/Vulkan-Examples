// Converts equirectangular projection texture into a cubemap
//Mostly Adapted from https://github.com/Nadrin/PBR/blob/master/data/shaders/glsl/equirect2cube_cs.glsl
#version 460 core
const float PI = 3.141592;
const float TwoPI = 2 * PI;

layout(set=0, binding=0) uniform sampler2D u_InputTex;
layout(set=0, binding=1, rgba32f) restrict writeonly uniform imageCube o_TextureCube;

vec3 getSamplingVector()
{
    vec2 st = gl_GlobalInvocationID.xy/vec2(imageSize(o_TextureCube));
    vec2 uv = 2.0 * vec2(st.x, 1.0-st.y) - vec2(1.0);

    vec3 ret;
    //NOTE: Switch statement doesn't seem to work on NVIDIA.
    if(gl_GlobalInvocationID.z == 0)      ret = vec3(1.0,  uv.y, -uv.x);
    else if(gl_GlobalInvocationID.z == 1) ret = vec3(-1.0, uv.y,  uv.x);
    else if(gl_GlobalInvocationID.z == 2) ret = vec3(uv.x, 1.0, -uv.y);
    else if(gl_GlobalInvocationID.z == 3) ret = vec3(uv.x, -1.0, uv.y);
    else if(gl_GlobalInvocationID.z == 4) ret = vec3(uv.x, uv.y, 1.0);
    else if(gl_GlobalInvocationID.z == 5) ret = vec3(-uv.x, uv.y, -1.0);
    return normalize(ret);
}

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main(void)
{
	vec3 v = getSamplingVector();
	float phi   = atan(v.z, v.x);
	float theta = acos(v.y);
    vec2 uv = vec2(phi / TwoPI + 0.5, theta / PI);
	vec4 color = texture(u_InputTex, uv);
	imageStore(o_TextureCube, ivec3(gl_GlobalInvocationID), color);
}